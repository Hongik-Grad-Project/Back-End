spring:
  profiles:
    active: local    # 디폴트로 로드
    group:
      local: local, common, secret
      blue: blue, common, secret
      green: green, common, secret

server:
  env: blue

---

spring:
  config:
    activate:
      on-profile: local
  security:
    oauth2:
      client:
        registration:
          naver:
            redirect-uri: http://localhost:3000/login/oauth2/callback/naver  # 코드를 받는 callback 주소
          google: # /oauth2/authorization/google
            redirect-uri: http://localhost:3000/login/oauth2/callback/google

server:
  port: 8080
  serverAddress: localhost

serverName: local_server

---

spring:
  config:
    activate:
      on-profile: blue
  security:
    oauth2:
      client:
        registration:
          naver:
            redirect-uri: http://13.209.251.1:3000/login/oauth2/callback/naver  # 코드를 받는 callback 주소
          google: # /oauth2/authorization/google
            redirect-uri: http://13.209.251.1:3000/login/oauth2/callback/google

server:
  port: 8080
  serverAddress: 13.209.251.1

serverName: blue_server

---

spring:
  config:
    activate:
      on-profile: green
  security:
    oauth2:
      client:
        registration:
          naver:
            redirect-uri: http://13.209.251.1:3000/login/oauth2/callback/naver  # 코드를 받는 callback 주소
          google: # /oauth2/authorization/google
            redirect-uri: http://13.209.251.1:3000/login/oauth2/callback/google

server:
  port: 8081
  serverAddress: 13.209.251.1

serverName: green_server

---

spring:
  config:
    activate:
      on-profile: common

  jpa:
    hibernate:
      ddl-auto: create # 테이블을 drop하지 않음 data를 계속 쓸 수 있음
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
  #        show_sql: true   # sout 으로 출력

logging:
  level:
    org.hibernate.SQL: debug  # logger를 통해 출력
    org.hibernate.type: trace