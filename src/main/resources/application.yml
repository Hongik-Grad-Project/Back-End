spring:
  profiles:
    active: local
    group:
      local: local, common, secret
      blue: blue, common, secret
      green: green, common, secret

server:
  env: blue

---

spring:
  config:
    activate:
      on-profile: local
  security:
    oauth2:
      client:
        registration:
          naver:
            redirect-uri: ${NAVER_REDIRECT_URL}  # 코드를 받는 callback 주소

          google: # /oauth2/authorization/google
            redirect-uri: ${GOOGLE_REDIRECT_URL}

server:
  port: 8080
  address: localhost

serverName: local_server

---

spring:
  config:
    activate:
      on-profile: blue
  security:
    oauth2:
      client:
        registration:
          naver:
            redirect-uri: http://13.209.251.1:3000/login/oauth2/callback/naver  # 코드를 받는 callback 주소

          google: # /oauth2/authorization/google
            redirect-uri: http://13.209.251.1:3000/login/oauth2/callback/google

server:
  port: 8080
  address: 13.209.251.1

serverName: blue_server

---

spring:
  config:
    activate:
      on-profile: green
  security:
    oauth2:
      client:
        registration:
          naver:
            redirect-uri: http://13.209.251.1:3000/login/oauth2/callback/naver  # 코드를 받는 callback 주소

          google: # /oauth2/authorization/google
            redirect-uri: http://13.209.251.1:3000/login/oauth2/callback/google

server:
  port: 8081
  address: 13.209.251.1

serverName: green_server

---

spring:
  config:
    activate:
      on-profile: common

  jpa:
    hibernate:
      ddl-auto: update # 테이블을 drop하지 않음 data를 계속 쓸 수 있음
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
#        show_sql: true   # sout 으로 출력

  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope: name, email
            client-name: Naver # ????? ??? ?? ????? ???? ?????.
            authorization-grant-type: authorization_code

          google: # /oauth2/authorization/google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            client-name: Google
            authorization-grant-type: authorization_code

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: ${NAVER_TOKEN_URI}
            user-info-uri: ${NAVER_USER_INFO_URI}
            user-name-attribute: response # 회원 정보를 json으로 받는데 response라는 키값으로 네이버가 리턴해줌.

logging:
  level:
    org.hibernate.SQL: debug  # logger를 통해 출력
    org.hibernate.type: trace
