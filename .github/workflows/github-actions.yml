# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main이나 dev 브랜치에 pull request가 발생 되었을 때 실행
on:
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Project with Gradle
        run: ./gradlew build -x test

      - name: Login to docker hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Build docker image
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/trackers .

      - name: Publish image to docker hub
        run: docker push ${{secrets.DOCKER_USERNAME}}/trackers:latest

  deploy:
    needs: build
    runs-on: [ aws-ec2 ]
    steps:
      - name: Pull Image from docker hub
        run: docker pull ${{secrets.DOCKER_USERNAME}}/trackers:latest

      - name: Delete old container
        run: docker rm -f trackers-container

      - name: Run docker container
        run: docker run -d -p 8080:8080 --name trackers-container ${{secrets.DOCKER_USERNAME}}/trackers
#  CI-CD:
#    runs-on: ubuntu-latest
#    steps:
#      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
#      - uses: actions/checkout@v3    # 복잡하지만 자주 사용되는 작업 단위를 재사용이 가능하도록 만든 실행 단위
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # gradle caching - 빌드 시간 향상
#      - name: Gradle Caching
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      # 환경별 yml 파일 생성(2) - dev
#      - name: make application.yml
#        if: contains(github.ref, 'dev')
#        run: |
#          cd ./src/main/resources
#          touch ./application.yml
#          echo "${{ secrets.YML }}" > ./application.yml
#        shell: bash
#
##      # 환경별 yml 파일 생성(3) - prod
##      - name: make application-prod.yml
##        if: contains(github.ref, 'main')
##        run: |
##          cd ./src/main/resources
##          touch ./application-prod.yml
##          echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
##        shell: bash
#
#      # 권한 부여
#      - name: Grant execute permission for gradlew
#        run: chmod +x ./gradlew
#        shell: bash
#
#      # gradle build
#      - name: Build with Gradle
#        run: ./gradlew build -x test
#        shell: bash
#
#      # build 시점의 시간 롹보
#      - name: Get current time
#        uses: 1466587594/get-current-time@v2
#        id: current-time
#        with:
#          format: YYYY-MM-DDTHH-mm-ss
#          utcOffset: "+09:00"
#
#      # 확보한 시간 보여주기
#      - name: Show Current Time
#        run: echo "CurrentTime=$"
#        shell: bash
#
#      #      # docker build & push to production
##      - name: Docker build & push to prod
##        if: contains(github.ref, 'main')
##        run: |
##          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
##          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
##          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
#
#      # docker build & push to dev
#      - name: Docker build & push to dev
#        if: contains(github.ref, 'dev')
#        run: |
#          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/trackers .
#          docker push ${{ secrets.DOCKER_USERNAME }}/trackers
#
##      ## deploy to production
##      - name: Deploy to prod
##        uses: appleboy/ssh-action@master
##        id: deploy-prod
##        if: contains(github.ref, 'main')
##        with:
##          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
##          username: ubuntu
##          key: ${{ secrets.PRIVATE_KEY }}
##          envs: GITHUB_SHA
##          script: |
##            sudo docker ps
##            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
##            sudo docker run -d -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
##            sudo docker image prune -f
#
#      ## deploy to develop
#      - name: Deploy to dev
#        uses: appleboy/ssh-action@master
#        id: deploy-dev
#        if: contains(github.ref, 'dev')
#        with:
#          host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
#          username: ${{ secrets.USERNAME }}
#          password: ${{ secrets.PASSWORD }}
#          port: 22
#          key: ${{ secrets.PRIVATE_KEY }}
#          script: |
#            sudo docker ps
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/trackers
#            sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/trackers
#            sudo docker image prune -f